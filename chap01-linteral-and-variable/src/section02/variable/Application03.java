package section02.variable;

public class Application03 {
    public static void main(String[] args) {
        /*
        * 변수의 명명 규칙
        * 변수의 이름을 지을 때 아무렇게나 짓는 것이 아닌 정해진 규칙이 있다.
        * 실무적으로는 굉장히 중요하기 때문에 반드시 숙지를 해야한다.
        * 또한 규칙에 맞는 올바른 변수명을 짓는 것이 좋은 프로그래밍을 하는 첫 단추이다.
        * */
        /*
        * 변수의 명명 규칙
        * 1. 컴파일 에러를 발생 시키는 규칙
        *   1-1 동일한 범위 내에서는 동일한 변수명을 가질 수 없다.
        *   1-2 예약어는 사용이 불가능하다. (예약어란 프로그램에서 미리 사용하겠다고 Compiler와 약속한 키워드를 예약어라고 한다.)
        *   1-3 변수명은 대/소문자를 구분한다. (자바는 대/소문자를 엄격하게 구분하는 언어이다.)
        *   1-4 변수명은 숫자로 시작할 수 없다. (시작하는 것만 불가능하고 숫자를 섞어서 사용하는 것은 가능하다.)
        *   1-5 특수 기호는 '_'와 '$'만 사용 가능하다.
        * 2. 컴파일 에러를 발생 시키지 않지만, 개발자들끼리의 암묵적인 규칙
        *   2-1 변수명의 길이 제한은 없다. (하지만 적당히 해야한다.)
        *   2-2 변수명이 합성어로 이루어진 경우 첫 단어는 소문자, 두 번째 단어의 싲가은 대문자로 한다 (camel-case)
        *   2-3 단어와 단어 사이의 연결은 언더스코어로(_)하지 않는다. (타 언어 네이밍 규칙이다.) (snake-case)
        *   2-4 한글로 변수명을 짓는 것이 가능하지만 권장하지는 않는다. (한글을 취급하는 다양한 방식들이 존재하기 때문에 영어로 작성하는 것이 좋다.
        *   2-5 변수 안에 저장된 값이 어떤 의미를 가지는지를 명확하게 표현하도록 한다.
        *   2-6 전형적인 변수 이름이 있다면 가급적 사용하도록 한다.
        *   2-7 명사형으로 작성할 수 있도록 한다.
        *   2-8 boolean 형은 의문문으로 가급적 긍정 형태의 네이밍을 한다.
        * */

        // 동일한 범위 내에서 동일한 변수명을 가질 수 없다.
        int age = 20;
        // int age = 10; age가 존재하므로 재사용 불가능

        //목차 1-2 예약어는 사용이 불가능하다.
        /*int true = 10; true는 예약어
        int for = 10; for은 예약어 외에도 static, void ...*/

        // 1-3 변수명은 대소문자를 구분한다.
        int Age = 20; // 사용 가능하지만 개발자들끼리 사용 안함
        int True = 10; // 사용 가능하지만 개발자들끼리 사용 안함

        // 1-4 변수명은 숫자로 시작할 수 없다.
        // int 1test = 10;
        int t1est; //가능
        int test1; //가능

        // 1-5 특수 기호는 '_'와 '$'만 사용이 가능하다.
        int _age = 10;
        int tes$t$ = 20;
        // int *test; 불가능

        // 에러를 발생 시키지 않지만 개발자들 끼리의 암묵적인 규칙
        int ksadjiwlrkajdiwlqekdajdilwjkas = 10; // 너무 더러움

        // 2-2 변수형이 합성어로 이루어진 경우 첫 단어는 소문자, 두 번째 시작 단어는 대문자로 시작한다.
        // 자바에서는 클래스명만 유일하게 대문자로 시작한다.
        int MaxAge = 10; // 가능하지만 사용하지 않음
        int maxAge = 10; // 올바른 사용

        // 2-3 단어와 단어 사이의 연결은 언더스코어(_)를 사용하지 않는다. (근무지의 룰에 따름)
        String user_name; // snake-case
        String UserName; // camel-case

        // 2-4 한글로 변수명을 짓는 것은 가능하지만 권장하지 않는다.
        int 나이 = 10; // 가능하지만 사용하지 않음

        // 2-5 변수 안에 저장된 값이 어떤 의미를 가지는지 명확하게 표현하도록 한다.
        String s;
        String name;

        // 2-6 전형적인 변수 이름이 있다면 가급적으로 사용한다.
        int sum = 0;
        int max = 10;
        int min = 0;
        int count = 0;
        int cnt = 0;

        // 2-7 명사형으로 작성할 수 있도록 한다.
        String goHome; // 가능하지만 명사형으로 짓는다.
        String home;

        // 2-8 boolean 형은 의문문으로 가급적이면 긍정의 형태를 갖는다.
        boolean isAlive = true;
        boolean isDead = false; // 부정형보다는 긍정형을 권장한다.

        // 김경리가 사원 10명의 월급을 입금해줘야 하는 날이다. 사원의 직책은 대리/ 과장/ 부징/ 차장이 있으며,
        // 대리는 100만원
        // 과장은 120만원
        // 부장은 130만원
        // 차장은 150만원의 월급을 받는데
        // 보너스는 각 월급 *0.5 만큼을 더해서 주어야한다.
        // 화면에 보여지는 형태는 "김대리의 월급은 100만원 + 보너스 50만원으로 총 150만원 입금되었습니다.

        int salary1 = 150;
        int salary2 = 130;
        int salary3 = 120;
        int salary4 = 100;
        int bonus1 = (int)(salary1 * 0.5);
        int bonus2 = (int)(salary2 * 0.5);
        int bonus3 = (int)(salary3 * 0.5);
        int bonus4 = (int)(salary4 * 0.5);

        System.out.println("김차장님의 월급은 " + salary1 + "만원" + " + " + "보너스 " + bonus1 + "만원으로 총 " + (salary1 + bonus1) + "만원 입금되었습니다.");
        System.out.println("김부장님의 월급은 " + salary2 + "만원" + " + " + "보너스 " + bonus2 + "만원으로 총 " + (salary2 + bonus2) + "만원 입금되었습니다.");
        System.out.println("김과장님의 월급은 " + salary3 + "만원" + " + " + "보너스 " + bonus3 + "만원으로 총 " + (salary3 + bonus3) + "만원 입금되었습니다.");
        System.out.println("김대리님의 월급은 " + salary4 + "만원" + " + " + "보너스 " + bonus4 + "만원으로 총 " + (salary4 + bonus4) + "만원 입금되었습니다.");
    }
}
